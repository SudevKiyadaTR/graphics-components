{"version":3,"file":"Video.stories-3d14d72e.js","sources":["../../src/components/Video/stories/docs/component.md?raw","../../src/components/Video/stories/docs/playAndLoop.md?raw","../../src/components/Video/stories/docs/controls.md?raw","../../src/components/Video/stories/videos/silent-video.mp4","../../src/components/Video/stories/videos/sound-video.mp4","../../node_modules/svelte-intersection-observer/src/IntersectionObserver.svelte","../../src/components/Video/Controls.svelte","../../src/components/Video/Video.svelte","../../src/components/Video/Video.stories.svelte"],"sourcesContent":["export default \"General-purpose video component. Can play on load or when the video comes into view and has play/pause controls. Supports videos with or without audio.\\n\\n```svelte\\n<script>\\n  import { Video } from '@reuters-graphics/graphics-components';\\n  import { assets } from '$app/paths'; // If using local video in the Graphics Kit\\n</script>\\n\\n<Video\\n  ariaDescription=\\\"{'Compulsory description of your video for screen readers.'}\\\"\\n  src=\\\"{`${assets}/videos/myVideo.mp4`}\\\"\\n  width=\\\"{'wide'}\\\"\\n  caption=\\\"{'Optional caption for your video.'}\\\"\\n/>\\n```\\n\"","export default \"`playVideoWhenInView`, `playVideoThreshold`\\n\\n- By default, the video will **start playing when 50% of the video element's height is visible on the page**.\\n  To control the threshold of visibility at which the video starts playing, add the prop `playVideoThreshold` and set it to a value between 0 and 1,\\n  where 0 means that the video will start playing as soon as its top enters the viewport, while 1 means it will start when the whole video is in the viewport.\\n\\n- If you don't want the video to play when you scroll to it, but **on page load**, add the prop `playVideoWhenInView={false}`. The default of the prop is `true`,\\n  which corresponds to the behaviour described above.\\n\\n`loopVideo`\\n\\n- By default, the video will **loop**. If you don't want that, add the prop `loopVideo={false}`.\\n\\nHere is an example of what the same video would look like with a visibility threshold of 0.9 and not looping. Scroll down slowly to observe the behaviour.\\n\\n```svelte\\n<script>\\n  import { Video } from '@reuters-graphics/graphics-components';\\n</script>\\n\\n<Video\\n  ariaDescription=\\\"{'Compulsory description of your video for screen readers.'}\\\"\\n  src=\\\"{'path-to-video-or-external-url'}\\\"\\n  width=\\\"{'normal'}\\\"\\n  loopVideo=\\\"{false}\\\"\\n  playVideoThreshold=\\\"{0.9}\\\"\\n/>\\n```\\n\"","export default \"`showControls`\\n\\n- By default, the video has a play/pause button, which corresponds to\\n  `showControls={true}`. If you don't want these, just set `showControls={false}`.\\n  When you do that, the icons themselves will disappear but the functionality of playing and pausing remains and can be done by clicking on the video itself.\\n  If you don't want to enable any play/pause functionality, add `possibleToPlayPause={false}`.\\n- If you want to show the controls only when the video is hovered, set `hoverToSeeControls={true}`.\\n\\n`controlsColour`, `controlsOpacity`, `controlsPosition`, `separateReplayIcon`\\n\\nIf you do want to leave the controls, you have a couple of options to style them:\\n\\n- Set `controlsColour` to a colour of your choosing.\\n- Set `controlsOpacity` to a value between `0` and `1` to control the opacity. The default is `0.5`.\\n- Change the placement of the controls to one of: `top right`, `top left`, `bottom right`, `bottom left`, `center` by setting `controlsPosition`.\\n- Change the play button to a replay button at the end of the video with the option `separateReplayIcon={true}`.\\n\\nHere is an example with bottom right corner white opaque controls, with a replay button, where you have to hover on the video to see the controls.\\n\\n```svelte\\n<script>\\n  import { Video } from '@reuters-graphics/graphics-components';\\n</script>\\n\\n<Video\\n  ariaDescription=\\\"{'Compulsory description of your video for screen readers.'}\\\"\\n  src=\\\"{'path-to-video-or-external-url'}\\\"\\n  width=\\\"{'normal'}\\\"\\n  caption=\\\"{'Optional caption for your video.'}\\\"\\n  playVideoThreshold=\\\"{0.1}\\\"\\n  controlsColour=\\\"{'white'}\\\"\\n  controlsOpacity=\\\"{1}\\\"\\n  controlsPosition=\\\"{'bottom right'}\\\"\\n  separateReplayIcon=\\\"{true}\\\"\\n  loopVideo=\\\"{false}\\\"\\n  hoverToSeeControls=\\\"{true}\\\"\\n/>\\n```\\n\"","export default \"__VITE_ASSET__1a93015c__\"","export default \"__VITE_ASSET__cdb5de26__\"","<script>\n  /**\n   * The HTML Element to observe.\n   * @type {HTMLElement}\n   */\n  export let element = null;\n\n  /**\n   * Set to `true` to unobserve the element\n   * after it intersects the viewport.\n   * @type {boolean}\n   */\n  export let once = false;\n\n  /**\n   * `true` if the observed element\n   * is intersecting the viewport.\n   */\n  export let intersecting = false;\n\n  /**\n   * Specify the containing element.\n   * Defaults to the browser viewport.\n   * @type {HTMLElement}\n   */\n  export let root = null;\n\n  /** Margin offset of the containing element. */\n  export let rootMargin = \"0px\";\n\n  /**\n   * Percentage of element visibility to trigger an event.\n   * Value must be between 0 and 1.\n   */\n  export let threshold = 0;\n\n  /**\n   * Observed element metadata.\n   * @type {null | IntersectionObserverEntry}\n   */\n  export let entry = null;\n\n  /**\n   * `IntersectionObserver` instance.\n   * @type {null | IntersectionObserver}\n   */\n  export let observer = null;\n\n  import { tick, createEventDispatcher, afterUpdate, onMount } from \"svelte\";\n\n  const dispatch = createEventDispatcher();\n\n  let prevRootMargin = null;\n  let prevElement = null;\n\n  const initialize = () => {\n    observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((_entry) => {\n          entry = _entry;\n          intersecting = _entry.isIntersecting;\n        });\n      },\n      { root, rootMargin, threshold }\n    );\n  };\n\n  onMount(() => {\n    initialize();\n\n    return () => {\n      if (observer) {\n        observer.disconnect();\n        observer = null;\n      }\n    };\n  });\n\n  afterUpdate(async () => {\n    if (entry !== null) {\n      dispatch(\"observe\", entry);\n\n      if (entry.isIntersecting) {\n        dispatch(\"intersect\", entry);\n\n        if (once) observer.unobserve(element);\n      }\n    }\n\n    await tick();\n\n    if (element !== null && element !== prevElement) {\n      observer.observe(element);\n\n      if (prevElement !== null) observer.unobserve(prevElement);\n      prevElement = element;\n    }\n\n    if (prevRootMargin && rootMargin !== prevRootMargin) {\n      observer.disconnect();\n      prevElement = null;\n      initialize();\n    }\n\n    prevRootMargin = rootMargin;\n  });\n</script>\n\n<slot {intersecting} {entry} {observer} />\n","<script>\n  import Fa from 'svelte-fa';\n  import { faReply, faPlay, faPause } from '@fortawesome/free-solid-svg-icons';\n  import { createEventDispatcher } from 'svelte';\n\n  const dispatch = createEventDispatcher();\n\n  export let paused;\n  export let clickedOnPauseBtn;\n  export let controlsOpacity;\n  export let controlsPosition;\n  export let widthVideoContainer;\n  export let heightVideoContainer;\n  export let controlsBorderOffset;\n  export let resetCondition;\n  export let separateReplayIcon;\n  export let controlsColour;\n\n  function forwardBtnClick() {\n    paused = !paused;\n    clickedOnPauseBtn = paused === true; // so video doesn't autoplay when coming into view again if paused previously\n    dispatch('pausePlayEvent', {\n      paused,\n      clickedOnPauseBtn,\n    });\n  }\n</script>\n\n<button\n  on:click=\"{forwardBtnClick}\"\n  style=\"\n    opacity: {controlsOpacity}; \n    top: {controlsPosition === 'top left' || controlsPosition === 'top right'\n    ? `${10}px`\n    : controlsPosition === 'center'\n    ? `${(heightVideoContainer - controlsBorderOffset) / 2}px`\n    : `${heightVideoContainer - controlsBorderOffset}px`};\n\n    left: {controlsPosition === 'top left' || controlsPosition === 'bottom left'\n    ? `${10}px`\n    : controlsPosition === 'center'\n    ? `${(widthVideoContainer - controlsBorderOffset) / 2}px`\n    : `${widthVideoContainer - controlsBorderOffset}px`};\n    \"\n>\n  {#if resetCondition}\n    <i class=\"play-pause-icon replay\">\n      {#if separateReplayIcon}\n        <Fa icon=\"{faReply}\" size=\"2x\" color=\"{controlsColour}\" />\n      {:else}\n        <Fa icon=\"{faPlay}\" size=\"2x\" color=\"{controlsColour}\" />\n      {/if}\n    </i>\n  {:else if paused === false}\n    <i class=\"play-pause-icon pause\">\n      <Fa icon=\"{faPause}\" size=\"2x\" color=\"{controlsColour}\" />\n    </i>\n  {:else if paused === true}\n    <i class=\"play-pause-icon play\">\n      <Fa icon=\"{faPlay}\" size=\"2x\" color=\"{controlsColour}\" />\n    </i>\n  {:else}\n    error\n  {/if}\n</button>\n\n<style lang=\"scss\">\n  button {\n    z-index: 2;\n    position: absolute;\n    cursor: pointer;\n    background-color: transparent;\n    border: none;\n  }\n</style>\n","<!-- @component `Video` [Read the docs.](https://reuters-graphics.github.io/graphics-components/?path=/docs/components-Video--default) -->\n<script lang=\"ts\">\n  import IntersectionObserver from 'svelte-intersection-observer';\n  import Controls from './Controls.svelte';\n  import GraphicBlock from '../GraphicBlock/GraphicBlock.svelte';\n  import type { ContainerWidth } from '../@types/global';\n\n  /// //////////////////////////////////\n  /// /////////// Props ////////////////\n  /// //////////////////////////////////\n\n  /**\n   * Video src.\n   */\n  export let src = '';\n  export let ariaHidden = true;\n  export let ariaDescription = null;\n\n  /**\n   * Title of the graphic\n   * @type {string}\n   */\n  export let title: string | null = null;\n\n  /**\n   * Notes to the graphic, passed in as a markdown string.\n   * @type {string}\n   */\n  export let notes: string | null = null;\n\n  /**\n   * Description of the graphic, passed in as a markdown string.\n   * @type {string}\n   */\n  export let description: string | null = null;\n\n  /**\n   * Width of the block within the article well.\n   * @type {string}\n   */\n  export let width: ContainerWidth = 'normal';\n\n  type PreloadOptions = 'auto' | 'none' | 'metadata';\n\n  /**\n   * Set a different width for the text within the text well, for example,\n   * \"normal\" to keep the title, description and notes inline with the rest\n   * of the text well. Can't ever be wider than `width`.\n   * @type {string}\n   */\n  export let textWidth: ContainerWidth | null = 'normal';\n\n  /**\n   * Preload options. `auto` is ignored if `autoplay` is true. Can also be `none` or `metadata`.\n   * @type {string}\n   */\n  export let preloadVideo: PreloadOptions = 'auto';\n  /**\n   * Whether the video should loop.\n   */\n  export let loopVideo: boolean = true;\n  /**\n   * Whether video should have sound or not.\n   */\n  export let muteVideo: boolean = true;\n  export let allowSoundToAutoplay = false; // for video with sound, whether video should be allowed to autoplay if the user has previously interacted with DOM\n\n  export let playVideoWhenInView = true; // whether the video should play when it comes into view or just on page load\n  export let playVideoThreshold = 0.5; // if video plays with intersection observer, how much of it should be into view to start playing\n  export let possibleToPlayPause = true; // whether to have the option to pause and play video\n\n  export let showControls = true; // whetner to show the play / pause buttons\n  export let hoverToSeeControls = false; // whether you need to hover over the video to see the controls\n  export let separateReplayIcon = false; // whether to use a separate replay icon or use the play icon for replay as well\n  export let controlsColour = '#333'; // change the colour of the play/pause button\n  export let controlsOpacity = 0.5; // change the opacity of the play/pause button\n  $: interactiveControlsOpacity = 0;\n  export let controlsPosition = 'top left'; // have four options for controls position - top right, top left, bottom right, bottom left\n\n  /// //////////////////////////////////\n  /// /////// Internal Logic ///////////\n  /// //////////////////////////////////\n  // Internal props\n  let time = 0;\n  let duration;\n  let paused = true;\n  let clickedOnPauseBtn = false; // special variable to track if user clicked on 'pause' btn to help with audio logic\n  $: resetCondition = time >= duration; // - 0.1;\n\n  // Dimensions etc other useful things\n  let heightVideo;\n  let widthVideo;\n  let heightVideoContainer;\n  let widthVideoContainer;\n  const controlsBorderOffset = 50;\n\n  // For intersection observer\n  let intersecting;\n  let element;\n  let videoElement;\n\n  // For video with sound, check if there has been an interaction with the DOM\n  let interactedWithDom = false;\n  const setInteractedWithDom = () => {\n    interactedWithDom = true;\n  };\n\n  // Play the video (with no sound) if it's intersecting; pause when it's no longer intersecting\n  $: if (playVideoWhenInView && intersecting && muteVideo) paused = false;\n  $: if (playVideoWhenInView && !intersecting) paused = true;\n  // Special case for video with sound\n  // Only ff you've clicked on play button or interacted with DOM in any way previously, video with audio will play\n  $: if (\n    allowSoundToAutoplay &&\n    playVideoWhenInView &&\n    intersecting &&\n    !muteVideo &&\n    interactedWithDom &&\n    !clickedOnPauseBtn // so video doesn't autoplay when coming into view again if paused previously\n  ) {\n    paused = false;\n  }\n\n  $: if (allowSoundToAutoplay && !muteVideo && !interactedWithDom) {\n    paused = true;\n  }\n\n  $: if (!possibleToPlayPause) showControls = true;\n\n  // To get the pause state passed up from the Controls\n  const pausePlayEvent = (e) => {\n    const fwdPaused = e.detail.paused;\n    const fwdClickedOnPauseBtn = e.detail.clickedOnPauseBtn;\n    paused = fwdPaused;\n    clickedOnPauseBtn = fwdClickedOnPauseBtn;\n  };\n\n  // Warning to missing aria attributes\n  if (ariaHidden && !ariaDescription) {\n    console.warn(\n      'Must provide aria description for video components if ariaHidden is true.'\n    );\n  }\n</script>\n\n<svelte:window\n  on:click=\"{setInteractedWithDom}\"\n  on:touchstart=\"{setInteractedWithDom}\"\n/>\n\n<GraphicBlock\n  textWidth=\"{textWidth}\"\n  title=\"{title}\"\n  description=\"{description}\"\n  notes=\"{notes}\"\n  width=\"{width}\"\n  class=\"video-container\"\n>\n  <div\n    role=\"figure\"\n    on:mouseover=\"{() => {\n      interactiveControlsOpacity = controlsOpacity;\n    }}\"\n    on:focus=\"{() => {\n      interactiveControlsOpacity = controlsOpacity;\n    }}\"\n    on:mouseout=\"{() => {\n      interactiveControlsOpacity = 0;\n    }}\"\n    on:blur=\"{() => {\n      interactiveControlsOpacity = 0;\n    }}\"\n  >\n    {#if (ariaHidden && ariaDescription) || !ariaHidden}\n      {#if ariaDescription}\n        <p class=\"visually-hidden\">{ariaDescription}</p>\n      {/if}\n\n      {#if playVideoWhenInView}\n        <!-- Video element with Intersection Observer -->\n        <IntersectionObserver\n          element=\"{element}\"\n          bind:intersecting=\"{intersecting}\"\n          threshold=\"{playVideoThreshold}\"\n          once=\"{false}\"\n        >\n          <div\n            bind:this=\"{element}\"\n            class=\"video-wrapper relative block\"\n            aria-hidden=\"{ariaHidden}\"\n            bind:clientWidth=\"{widthVideoContainer}\"\n            bind:clientHeight=\"{heightVideoContainer}\"\n          >\n            {#if possibleToPlayPause}\n              {#if showControls}\n                <Controls\n                  on:pausePlayEvent=\"{pausePlayEvent}\"\n                  paused=\"{paused}\"\n                  clickedOnPauseBtn=\"{clickedOnPauseBtn}\"\n                  controlsOpacity=\"{hoverToSeeControls\n                    ? interactiveControlsOpacity\n                    : controlsOpacity}\"\n                  controlsPosition=\"{controlsPosition}\"\n                  widthVideoContainer=\"{widthVideoContainer}\"\n                  heightVideoContainer=\"{heightVideoContainer}\"\n                  controlsBorderOffset=\"{controlsBorderOffset}\"\n                  resetCondition=\"{resetCondition}\"\n                  separateReplayIcon=\"{separateReplayIcon}\"\n                  controlsColour=\"{controlsColour}\"\n                />\n              {:else}\n                <button\n                  class=\"border-0 m-0 p-0 bg-transparent absolute\"\n                  on:click=\"{() => {\n                    paused === true ? (paused = false) : (paused = true);\n                  }}\"\n                  style=\"top: 0; left: 0; width: {widthVideoContainer}px; height: {heightVideoContainer}px;\"\n                ></button>\n              {/if}\n            {/if}\n            <video\n              bind:this=\"{videoElement}\"\n              src=\"{src}\"\n              class=\"pointer-events-none relative\"\n              width=\"100%\"\n              muted=\"{muteVideo}\"\n              playsinline\n              preload=\"{preloadVideo}\"\n              loop=\"{loopVideo}\"\n              bind:currentTime=\"{time}\"\n              bind:duration=\"{duration}\"\n              bind:paused=\"{paused}\"\n              bind:clientWidth=\"{widthVideo}\"\n              bind:clientHeight=\"{heightVideo}\"\n            >\n              <track kind=\"captions\" />\n            </video>\n          </div>\n        </IntersectionObserver>\n      {:else}\n        <!-- Video element without Intersection observer -->\n        <div\n          class=\"video-wrapper relative\"\n          aria-hidden=\"{ariaHidden}\"\n          bind:clientWidth=\"{widthVideoContainer}\"\n          bind:clientHeight=\"{heightVideoContainer}\"\n        >\n          {#if possibleToPlayPause}\n            {#if showControls}\n              <Controls\n                on:pausePlayEvent=\"{pausePlayEvent}\"\n                paused=\"{paused}\"\n                clickedOnPauseBtn=\"{clickedOnPauseBtn}\"\n                controlsOpacity=\"{controlsOpacity}\"\n                controlsPosition=\"{controlsPosition}\"\n                widthVideoContainer=\"{widthVideoContainer}\"\n                heightVideoContainer=\"{heightVideoContainer}\"\n                controlsBorderOffset=\"{controlsBorderOffset}\"\n                resetCondition=\"{resetCondition}\"\n                separateReplayIcon=\"{separateReplayIcon}\"\n                controlsColour=\"{controlsColour}\"\n              />\n            {:else}\n              <button\n                class=\"border-0 m-0 p-0 bg-transparent absolute\"\n                on:click=\"{() => {\n                  paused === true ? (paused = false) : (paused = true);\n                }}\"\n                style=\"top: 0; left: 0; width: {widthVideoContainer}px; height: {heightVideoContainer}px;\"\n              ></button>\n            {/if}\n          {/if}\n          <video\n            bind:this=\"{videoElement}\"\n            src=\"{src}\"\n            class=\"pointer-events-none relative\"\n            width=\"100%\"\n            muted=\"{muteVideo}\"\n            playsinline\n            preload=\"{preloadVideo}\"\n            loop=\"{loopVideo}\"\n            bind:currentTime=\"{time}\"\n            bind:duration=\"{duration}\"\n            bind:paused=\"{paused}\"\n            autoplay\n            bind:clientWidth=\"{widthVideo}\"\n            bind:clientHeight=\"{heightVideo}\"\n          >\n            <track kind=\"captions\" />\n          </video>\n        </div>\n      {/if}\n    {/if}\n  </div>\n  {#if $$slots.notes}\n    <!-- Custom notes and source slot -->\n    <slot name=\"notes\" />\n  {/if}\n</GraphicBlock>\n","<script>\n  import { Meta, Template, Story } from '@storybook/addon-svelte-csf';\n\n  // @ts-ignore\n  import componentDocs from './stories/docs/component.md?raw';\n  // @ts-ignore\n  import playAndLoopDocs from './stories/docs/playAndLoop.md?raw';\n  // @ts-ignore\n  import controlsDocs from './stories/docs/controls.md?raw';\n  // @ts-ignore\n  // import withSoundDocs from './stories/docs/withSound.md?raw';\n\n  // @ts-ignore\n  import SilentVideo from './stories/videos/silent-video.mp4';\n  // @ts-ignore\n  import SoundVideo from './stories/videos/sound-video.mp4';\n\n  import Video from './Video.svelte';\n\n  import {\n    withComponentDocs,\n    withStoryDocs,\n  } from '$lib/docs/utils/withParams.js';\n</script>\n\n<Meta\n  title=\"Components/Video\"\n  component=\"{Video}\"\n  {...withComponentDocs(componentDocs)}\n/>\n\n<Template let:args>\n  <Video {...args} />\n</Template>\n\n<Story\n  name=\"Default\"\n  args=\"{{\n    ariaDescription: 'Compulsory description of your video for screen readers.',\n    src: SilentVideo,\n    width: 'wide',\n    notes: 'Optional caption for your video.',\n  }}\"\n/>\n\n<Story\n  name=\"Playing and looping\"\n  args=\"{{\n    ariaDescription: 'Compulsory description of your video for screen readers.',\n    src: SilentVideo,\n    width: 'normal',\n    loopVideo: true,\n    notes:\n      \"World's longest glass bridge opens to public in Vietnam. (c) 2022 Thomson Reuters\",\n    playVideoThreshold: 0.9,\n  }}\"\n  {...withStoryDocs(playAndLoopDocs)}\n/>\n\n<Story\n  name=\"Controls\"\n  args=\"{{\n    ariaDescription: 'Compulsory description of your video for screen readers.',\n    src: SilentVideo,\n    width: 'normal',\n    notes:\n      \"World's longest glass bridge opens to public in Vietnam. (c) 2022 Thomson Reuters\",\n    playVideoThreshold: 0.9,\n    controlsColour: 'white',\n    controlsOpacity: 1,\n    controlsPosition: 'bottom right',\n    separateReplayIcon: true,\n    loopVideo: false,\n    hoverToSeeControls: true,\n  }}\"\n  {...withStoryDocs(controlsDocs)}\n/>\n\n<Story\n  name=\"Videos with sound\"\n  args=\"{{\n    ariaDescription: 'Compulsory description of your video for screen readers.',\n    src: SoundVideo,\n    width: 'normal',\n    notes:\n      \"World's longest glass bridge opens to public in Vietnam. (c) 2022 Thomson Reuters\",\n    playVideoThreshold: 0.9,\n    showControls: true,\n    loopVideo: false,\n    muteVideo: false,\n    playVideoWhenInView: true,\n    allowSoundToAutoplay: true,\n  }}\"\n  {...withStoryDocs(controlsDocs)}\n/>\n"],"names":["componentDocs","playAndLoopDocs","controlsDocs","SilentVideo","SoundVideo","element","$$props","once","intersecting","root","rootMargin","threshold","entry","observer","dispatch","createEventDispatcher","prevRootMargin","prevElement","initialize","entries","_entry","$$invalidate","onMount","afterUpdate","tick","faPlay","ctx","insert","target","i","anchor","faPause","faReply","set_style","button","paused","clickedOnPauseBtn","controlsOpacity","controlsPosition","widthVideoContainer","heightVideoContainer","controlsBorderOffset","resetCondition","separateReplayIcon","controlsColour","forwardBtnClick","create_if_block_7","p","create_if_block_5","attr","video","video_src_value","add_render_callback","div","append","track","dirty","controls_changes","create_if_block_3","create_if_block_1","if_block1","create_if_block","src","ariaHidden","ariaDescription","title","notes","description","width","textWidth","preloadVideo","loopVideo","muteVideo","allowSoundToAutoplay","playVideoWhenInView","playVideoThreshold","possibleToPlayPause","showControls","hoverToSeeControls","time","duration","heightVideo","widthVideo","videoElement","interactedWithDom","setInteractedWithDom","pausePlayEvent","e","fwdPaused","fwdClickedOnPauseBtn","$$value","value","interactiveControlsOpacity","Video","withComponentDocs","withStoryDocs"],"mappings":"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","x_google_ignoreList":[5]}